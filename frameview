#!/usr/bin/python

import sys
from binascii import hexlify
import numpy as np 
from datetime import datetime
import Image
import Tkinter as tk
import ImageTk

def tohex(binary):
	return hexlify(binary).upper()

def get_channel_id(marker):
	if marker == "C1":
		return 0
	elif marker == "C2":
		return 1
	elif marker == "C4":
		return 2
	elif marker == "C8":
		return 3
	else:
		return 4

filename = sys.argv[1]

f = open(filename, 'r')

if tohex(f.read(2)) != "DCCC":
	print "Invalid data file"
	sys.exit(1)

header = tohex(f.read(14))

active_detectors = format(int(header[0:2], 16), 'b').zfill(8)[3:]
num_active_detectors = 0
for char in active_detectors:
	if char == '1':
		num_active_detectors += 1

print num_active_detectors, "detectors active"

# 2 bytes for each pixel
channel_length = (256*256*2) + 1
frame_length = (channel_length * num_active_detectors) + 7


# Reads frame from file and creates a numpy array of pixels for each channel
# Returns arrays and timestamp
def get_frame(index):
	channels = [None, None, None, None, None]

	f.seek(16 + (frame_length * index))
	frame_header = tohex(f.read(7))[4:]
	timestamp = int(frame_header[0:8], 16)

	for i in range(num_active_detectors):
		channel_id = get_channel_id(tohex(f.read(1)))
		pixels = np.zeros((256, 256))

		for x in range(0, 256):
			for y in range(0, 256):
				pixel = bin(int(tohex(f.read(2)), 16))[2:].zfill(16)
				# First 2 bits are always 10 - pixel is only 14 bits long
				pixel = float(int(pixel[2:], 2))
				pixel = (pixel / 11810) * 256
				pixels[x][y] = pixel
		channels[channel_id] = pixels
	return (channels, timestamp)

def get_image(pixels):
	im = Image.new("L", (256, 256), "black")
	im_pixels = im.load()

	for x in range(0, 256):
		for y in range(0, 256):

			im_pixels[x, y] = int(pixels[x][y])
	return im

def update_window(index):
	global root, in_main_loop
	frame = get_frame(index)
	label_image = [None, None, None, None, None]
	img = [None, None, None, None, None]
	for i in range(5):
		if not frame[0][i] == None:
			img[i] = ImageTk.PhotoImage(get_image(frame[0][i]))
			label_image[i] = tk.Label(root, image=img[i])
			label_image[i].place(x=(256*i) + 5*(i+1) ,y=5,width=256,height=256)
	frame_label_text.set("Frame " + str(index + 1))
	timestamp = frame[1]
	dt = datetime.fromtimestamp(timestamp).strftime("%d-%m-%Y %H:%M:%S")
	timestamp_label_text.set("Frame timestamp: " + dt)
	if not in_main_loop:
		root.mainloop()

def leftKey(arg):
	global index
	if index > 0:
		index -= 1
		update_window(index)
def rightKey(arg):
	global index
	#print "right"
	index += 1
	update_window(index)

try:
	index = int(sys.argv[2])
except:
	index = 0


root = tk.Tk()
root.geometry("1310x420")
root.title("LUCID Frame Viewer: " + filename)
root.resizable(0, 0)
root.bind('<Left>', leftKey)
root.bind('<Right>', rightKey)

frame_label_text = tk.StringVar()
timestamp_label_text = tk.StringVar()

file_label = tk.Label(root, text="File: " + filename, font=(None, 15))
file_label.place(x = 10, y = 320)
frame_label = tk.Label(root, textvariable=frame_label_text, font = (None, 11))
frame_label.place(x = 10, y = 350)
timestamp_label = tk.Label(root, textvariable=timestamp_label_text, font = (None, 11))
timestamp_label.place(x = 10, y = 370)

in_main_loop = False
update_window(0)


f.close()