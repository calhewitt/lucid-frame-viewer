#!/usr/bin/python

# LUCID Frame Viewer
# This module manages the GUI of the program, event handlers etc.

import sys
import os
from lucidreader import LucidFile
import lucidreader
import frameplot
import numpy as np
from datetime import datetime
import noisemask
import Image
import Tkinter as tk
import ImageTk
import tkFileDialog
import tds1_telemetry as telemetry

if len(sys.argv) < 2:
	print "USAGE: frameview filename (--noisemask)"
	sys.exit(1)

try:
	filename = sys.argv[1]
	lucidfile = LucidFile(filename)
except IOError:
	print "The file specified does not exist or cannot be read. Exiting..."
	sys.exit(1)

def load_file(new_filename):
	global lucidfile, filename
	ad = lucidfile.num_active_detectors
	lucidfile = LucidFile(new_filename, ad)
	filename = os.path.basename(new_filename)
	update_gui()
	update_window(0)

def open_file(args):
	global filename
	filename = tkFileDialog.askopenfilename()
	load_file(filename)

# Display a zoomed version of a frame image
def zoom(event, image):
	image = image.resize((512, 512))
	image.show()

def update_window(index):
	global root, in_main_loop
	frame = lucidfile.get_frame(index)

	if do_noise_mask:
		frame = noisemask.apply_noise_mask(noise_mask, frame)

	label_image = [None, None, None, None, None]
	img = [None, None, None, None, None]

	for i in range(5):
		if not frame.channels[i] == None:
			image = frameplot.get_image(frame.channels[i], "RGB")
			img[i] = ImageTk.PhotoImage(image)
			label_image[i] = tk.Label(root, image=img[i])
			label_image[i].bind("<Double-1>", 
				lambda event, arg=image: zoom(event, arg))
			label_image[i].place(x=(256*i) + 5*(i+1) ,y=5,width=256,height=256)

	frame_label_text.set("Frame " + str(index + 1) + " of " + str(lucidfile.num_frames))
	timestamp = frame.timestamp
	dt = datetime.fromtimestamp(timestamp).strftime("%d-%m-%Y %H:%M:%S")
	timestamp_label_text.set("Frame timestamp: " + dt)
	#Get TDS1 Position and plot map
	position = telemetry.get_position("TDS1.tle", timestamp)
	coordinates_label_text.set("Lat: " + str(round(position.latitude, 2)) + " Lng: " + str(round(position.longitude, 2)))
	map_img = ImageTk.PhotoImage(telemetry.get_map(position.latitude, position.longitude))
	map_label = tk.Label(root, image = map_img, bg = "#333333")
	map_label.place(x = 940, y = 276)
	
	# Start main loop if not already running
	if not in_main_loop:
		root.mainloop()

def update_gui():
	file_label_text.set("File: " + filename)
	config_label_text.set("Config file: " + lucidfile.config)
	root.title("LUCID Frame Viewer: " + filename)

def leftKey(arg):
	global index
	if index > 0:
		index -= 1
		update_window(index)
def rightKey(arg):
	global index
	#print "right"
	if index < lucidfile.num_frames:
		index += 1
		update_window(index)

try:
	index = int(sys.argv[2])
except:
	index = 0


root = tk.Tk()
root.geometry("1310x466")

do_noise_mask = False
if "--noisemask" in sys.argv:
	print "Generating noise mask"
	noise_mask = noisemask.generate_noise_mask(lucidfile, 10)
	do_noise_mask = True
	print noise_mask

root.resizable(0, 0)
root.bind('<Left>', leftKey)
root.bind('<Right>', rightKey)

bottom_frame = tk.Frame(root, bg = "#333333", width = 1310, height = 200)
bottom_frame.place(x = 0, y = 266)

frame_label_text = tk.StringVar()
timestamp_label_text = tk.StringVar()
coordinates_label_text = tk.StringVar()
file_label_text = tk.StringVar()
config_label_text = tk.StringVar()

# Update GUI labels when a new file is loaded
file_label = tk.Label(root, textvariable=file_label_text, font=(None, 15), bg = "#333333", fg = "#ffffff")
file_label.place(x = 10, y = 320)
config_label = tk.Label(root, textvariable=config_label_text, font = (None, 11), bg = "#333333", fg = "#ffffff")
config_label.place(x = 10, y = 350)
frame_label = tk.Label(root, textvariable=frame_label_text, font = (None, 11), bg = "#333333", fg = "#ffffff")
frame_label.place(x = 10, y = 370)
timestamp_label = tk.Label(root, textvariable=timestamp_label_text, font = (None, 11), bg = "#333333", fg = "#ffffff")
timestamp_label.place(x = 10, y = 390)
coordinates_label = tk.Label(root, textvariable=coordinates_label_text, font = (None, 11), bg = "#333333", fg = "#ffffff")
coordinates_label.place(x = 10, y = 410)

open_file_button = tk.Label(root, text="Open File", font=(None, 11), bg = "#333333", fg = "#ffffff")
open_file_button.bind("<Button-1>", open_file)
open_file_button.place(x = 10, y = 280)

update_gui()

in_main_loop = False

update_window(0)